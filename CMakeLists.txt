cmake_minimum_required(VERSION 3.15)

project(rpc_basic C)

set(CMAKE_C_STANDARD 99)

#set(CMAKE_VERBOSE_MAKEFILE ON)

##################################################
# project source directories
##################################################
set(SOURCES_DIR "${CMAKE_SOURCE_DIR}/src")
set(PROTO_SOURCES_DIR "${SOURCES_DIR}/protocol")
set(CLIENT_SOURCES_DIR "${SOURCES_DIR}/client")
set(REMOTE_SOURCES_DIR "${SOURCES_DIR}/remote")

##################################################
# generated sources (will be generated by rpcgen)
##################################################
set(rpc_proto_hdr "${CMAKE_BINARY_DIR}/msg.h")
set(rpc_client_stub_src "${CMAKE_BINARY_DIR}/msg_clnt.c")
set(rpc_server_stub_src "${CMAKE_BINARY_DIR}/msg_svc.c")

##################################################
# protocol source (hand-written contract)
##################################################
set(rpc_proto_src "${CMAKE_BINARY_DIR}/msg.x")

##################################################
# rpcgen binary
##################################################
set(rpcgen_bin "/usr/bin/rpcgen")

#[[
    move msg.x from source directory to binary output directory,
    this happens before everything else!.
 ]]
configure_file("${PROTO_SOURCES_DIR}/msg.x" ${rpc_proto_src} COPYONLY)
#[[
    Runs command: `rpcgen msg.x` and produces msg.h, msg_clnt.c, and msg_svc.c in the build directory.
    This happens first in any build of any target in the project. because of the set_property(...)
    commands you see bellow.
]]
add_custom_command(
        OUTPUT "${rpc_proto_hdr}" "${rpc_client_stub_src}" "${rpc_server_stub_src}"
        DEPENDS "${rpc_proto_src}" "${rpcgen_bin}"
        COMMAND "${rpcgen_bin}" "${rpc_proto_src}"
        COMMENT "Generating rpc protocol header and stubs ..."
)

#[[
    Adding the library rpc_client, which will be linked against by rpc_basic.
    IMPORTANT!!!!!!: Every new source file that is added to ${CLIENT_SOURCES_DIR} MUST be added to the list of sources
                     here!!!!!
]]
add_library(rpc_client
        "${rpc_client_stub_src}"
        "${CLIENT_SOURCES_DIR}/rprintmsg.c"
        "${CLIENT_SOURCES_DIR}/printmsg.c"
        )

target_include_directories(rpc_client
        PUBLIC ${CMAKE_SOURCE_DIR}/include
        PRIVATE ${CMAKE_BINARY_DIR}
        )

target_compile_options(rpc_client
        PUBLIC "-lnsl"
        )

#[[
    The remote server that includes invokable remote procedures, copy this to the remote machine.
        IMPORTANT!!!!!!: Every new source file that is added to ${REMOTE_SOURCES_DIR} MUST be added to the list of sources
                     here!!!!!
 ]]
add_executable(rpc_server
        "${rpc_server_stub_src}"
        ${REMOTE_SOURCES_DIR}/msg_proc.c
        )

target_include_directories(rpc_server
        PRIVATE ${CMAKE_BINARY_DIR}
        )

target_compile_options(rpc_server
        PUBLIC "-lnsl"
        )

#[[
    The program that runs locally, uses rpc_client library produced from sources in src/client
    to invoke remote procedures produced from sources in src/remote.
]]
add_executable(rpc_local_bin main.c)

target_include_directories(rpc_local_bin
        PUBLIC ${CMAKE_SOURCE_DIR}/include
        PUBLIC ${CMAKE_BINARY_DIR})

target_link_libraries(rpc_local_bin rpc_client)
